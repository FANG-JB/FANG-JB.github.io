{"meta":{"title":"EAT浮粿","subtitle":"","description":"不积跬步无以至千里","author":"F","url":"http://example.com"},"pages":[{"title":"404","date":"2014-12-22T04:39:04.000Z","updated":"2021-07-14T09:01:57.126Z","comments":false,"path":"404/index.html","permalink":"http://example.com/404/index.html","excerpt":"","text":""},{"title":"about","date":"2021-07-14T07:59:43.000Z","updated":"2021-07-19T07:12:04.941Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-07-14T07:57:40.000Z","updated":"2021-07-14T08:44:09.367Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"commonweal","date":"2021-07-14T08:00:09.000Z","updated":"2021-07-14T08:44:56.638Z","comments":true,"path":"commonweal/index.html","permalink":"http://example.com/commonweal/index.html","excerpt":"","text":""},{"title":"sitemap","date":"2021-07-14T08:00:02.000Z","updated":"2021-07-14T08:00:02.715Z","comments":true,"path":"sitemap/index.html","permalink":"http://example.com/sitemap/index.html","excerpt":"","text":""},{"title":"文章标签","date":"2021-07-14T07:57:28.000Z","updated":"2021-07-14T08:42:29.884Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"schedule","date":"2021-07-14T07:59:54.000Z","updated":"2021-07-14T07:59:54.456Z","comments":true,"path":"schedule/index.html","permalink":"http://example.com/schedule/index.html","excerpt":"","text":""}],"posts":[{"title":"设计模式(1)-单例模式","slug":"设计模式-1-单例模式","date":"2021-07-22T02:59:51.048Z","updated":"2021-07-22T03:21:01.893Z","comments":false,"path":"2021/07/22/设计模式-1-单例模式/","link":"","permalink":"http://example.com/2021/07/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-1-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"通常某个类不需要重复的实例化对象，只需要在系统中实例一次即可，就可以用到单例模式。 饿汉式实现步骤 私有化构造器 实例化一个静态对象实例 对外提供一个静态方法返回实例对象 代码12345678910111213141516171819public class Singleton &#123; /** * 私有化构造器 */ private Singleton() &#123;&#125; /** * 在类内部实例一个对象 */ private final static Singleton instance = new Singleton(); /** * 对外提供一个获取实例对象的方法 */ public static Singleton getInstance () &#123; return instance; &#125;&#125; 优点：避免了线程同步问题 缺点：提前实例化，可能造成内存的不必要占用。 懒汉式实现步骤 私有化构造器 声明一个私有对象 对外提供一个方法，当有外部调用实例方法时，才进行对象的实例 代码1234567891011121314151617181920212223public class Singleton &#123; /** * 在类内部声明一个对象，暂未实例化 */ private static Singleton instance; /** * 私有化构造器 */ private Singleton() &#123;&#125; /** * 对外提供一个获取实例对象的方法, 判断对象未实例化时，先实例化对象 */ public static Singleton getInstance () &#123; if (null == instance) &#123; instance = new Singleton(); &#125; return instance; &#125;&#125; 优点：实现懒加载实例化，避免内存的不必要占用 缺点：在多线程的情况下是不安全的 改进12345678910/** * 对外提供一个获取实例对象的方法, 判断对象未实例化时，先实例化对象 */public static synchronized Singleton getInstance () &#123; if (null == instance) &#123; instance = new Singleton(); &#125; return instance;&#125; 在方法上增加synchronized保证线程安全 缺点：代码效率降低 双重检查123456789101112131415161718192021222324252627public class Singleton &#123; /** * 在类内部声明一个对象，暂未实例化 */ private static volatile Singleton instance; /** * 私有化构造器 */ private Singleton() &#123;&#125; /** * 双重判断+synchronized保证线程安全 */ public static Singleton getInstance () &#123; if (null == instance) &#123; synchronized (Singleton.class) &#123; if (null == instance) &#123; instance = new Singleton(); &#125; &#125; &#125; return instance; &#125;&#125; 线程安全和效率都可以 静态内部类123456789101112131415public class Singleton &#123; private Singleton()&#123; &#125; private static class SingletonInstance &#123; private static final Singleton INSTANCE = new Singleton(); &#125; public static Singleton getInstance () &#123; return SingletonInstance.INSTANCE; &#125;&#125; 静态内部类在被调用的时候才会被装载，实现了懒加载，并且避免了线程不安全 枚举12345678public enum Singleton &#123; INSTANCE; public static void main(String[] args) &#123; Singleton singleton = Singleton.INSTANCE; &#125;&#125; 最简单的实现方式， 推荐使用。","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"},{"name":"设计模式","slug":"设计模式","permalink":"http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}]}]}